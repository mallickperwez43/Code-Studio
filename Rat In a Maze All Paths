#include <bits/stdc++.h> 

bool isSafe(int x, int y, int n, vector<vector<int>> visited, vector<vector<int>> &maze){
  if((x >= 0 and x <= n - 1) and (y >= 0 and y <= n - 1) and visited[x][y] == 0 and maze[x][y] == 1){
    return true;
  }
  return false;
}

void solve(vector<vector<int>> &maze, int n, int x, int y, vector<vector<int>> visited, vector<vector<int>> &ans){
  //base case
  if(x == n - 1 and y == n - 1){
    vector<int> path;
    visited[x][y] = 1;
    
    for(int i = 0; i < n; i++){
      for(int j = 0; j < n; j++){
        path.push_back(visited[i][j]);
      }
    }

    visited[x][y] = 1;
    
    ans.push_back(path);
    return;
  }

  visited[x][y] = 1;

  //4 moves d,l,r,u

  //down
  int newx = x + 1;
  int newy = y;
  if(isSafe(newx, newy, n , visited, maze))
    solve(maze,n , newx, newy, visited, ans);
  
  //left
  newx = x;
  newy = y - 1;
  if(isSafe(newx, newy, n , visited, maze))
    solve(maze,n , newx, newy, visited, ans);

  //right
  newx = x;
  newy = y + 1;
  if(isSafe(newx, newy, n , visited, maze))
    solve(maze,n , newx, newy, visited, ans);

  //up
  newx = x - 1;
  newy = y;
  if(isSafe(newx, newy, n , visited, maze))
    solve(maze,n , newx, newy, visited, ans);

  visited[x][y] = 0;
}

vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.
  vector<vector<int>> ans;
  if(maze[0][0] == 0)
    return ans;

  int srcx = 0;
  int srcy = 0;

  vector<vector<int>> visited(n, vector<int> (n, 0));
  
  solve(maze, n, srcx, srcy, visited, ans);
  return ans;

}
