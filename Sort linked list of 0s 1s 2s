/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

// APPROACH 1 counting approach

Node* sortList(Node *head){
    // Write your code here.
    int zeroCount = 0;
    int oneCount = 0;
    int twoCount = 0;

    Node* temp = head;

    while(temp != NULL){
        if(temp -> data == 0)
            zeroCount++;
        else if (temp -> data == 1)
            oneCount++;
        else if(temp -> data == 2)
            twoCount++;

        temp = temp -> next;
    }

    temp = head;

    while(temp != NULL){
        if(zeroCount){
            temp -> data = 0;
            zeroCount--;
        }
        else if(oneCount){
            temp -> data = 1;
            oneCount--;
        }
        else if(twoCount){
            temp -> data = 2;
            twoCount--;
        }

        temp = temp -> next;
    }

    return head;
}
TC : O(N);
SC : O(1);


// APPROACH 2  new list of 0s 1s 2s and merging

void insertAtTail(Node* &tail, Node* cur){
    tail -> next = cur;
    tail = cur;
}

Node* sortList(Node *head){
    // Write your code here.

    Node* zeroHead = new Node(-1);
    Node* zeroTail = zeroHead;
    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;
    Node* twoHead = new Node(-1);
    Node* twoTail = twoHead;

    Node* cur = head;
   
    // create separate list of 0s 1s and 2s
    while(cur != NULL){
        int value = cur -> data;

        if(value == 0){
            insertAtTail(zeroTail, cur);
        }
        else if(value == 1){
            insertAtTail(oneTail, cur);
        }
        else if(value == 2){
            insertAtTail(twoTail, cur);
        }

        cur = cur -> next;
    }
    
    // merge 3sublist

    // 1s list is not empty
    if(oneHead -> next != NULL){
        zeroTail -> next = oneHead -> next;
    }
    else{
        // 1s list is empty   - EDGE CASE HANDLED
        zeroTail -> next = twoHead -> next;
    }

    oneTail -> next = twoHead -> next;
    twoTail -> next = NULL; 

    // setting head
    head = zeroHead -> next;

    // delete dummy nodes
    delete zeroHead;
    delete oneHead;
    delete twoHead; 

    return head;
}

TC : O(N);
SC : O(1);
