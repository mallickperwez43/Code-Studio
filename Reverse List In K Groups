/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* kReverse(Node* head, int k) {
    // Write your code here.

    // base case
    if(head == NULL)
        return NULL;

    // step 1 : Reverse first k nodes iteratively;
    Node * ahead = NULL;
    Node* cur = head;
    Node* prev = NULL;
    int count = 0;

    while(cur != NULL and count < k){
        ahead = cur -> next;
        cur -> next = prev;
        prev = cur;
        cur = ahead;
        count++;
    }

    // step 2 : Recursion dekh lega
    // edge is just to check if there are actually k nodes present
    // count the remaining list
    int remainingCount = 0;
    Node* remPtr = ahead;
    while(remPtr != NULL){
        remPtr = remPtr -> next;
        remainingCount++;
    }
    
    // if yess then call recursively
    if(remainingCount >= k){
        head -> next = kReverse(ahead, k);
    }
    // simply attach
    else{
        head -> next = ahead;
    }

    // step 3 : Return the head of the reversed list
    return prev;
}
