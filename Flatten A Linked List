/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* merge(Node* &down, Node* &right){
	if(down == NULL){
		return right;
	}

	if(right == NULL){
		return down;
	}

	Node* result = new Node(-1);
	Node* temp = result;

	while(down != NULL and right != NULL){
		if(down -> data < right -> data){
			temp -> child = down;
			temp = down;
			down = down -> child;
		}
		else{
			temp -> child = right;
			temp = right;
			right = right -> child;
		}
	}

	while(down != NULL){
		temp -> child = down;
		temp = down;
		down = down -> child;
	}

	while(right != NULL){
		temp -> child = right;
		temp = right;
		right = right -> child;
	}

	result = result -> child;
	return result;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
    
	// base case
	if(head == NULL or head -> next == NULL){
		return head;
	}

	Node* down = head;
	Node* right = flattenLinkedList(head -> next);

	down -> next = NULL;

	Node* ans = merge(down, right);

	return ans;

}
